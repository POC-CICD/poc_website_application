def app = [appName: 'website-application',   appPort: '7001']

pipeline {

  /* Environment variables related to docker hub */
  environment {
    registry = "nisumpk"
    registryCredential = 'docker-hub-credentials'
    dockerHost = 'localhost'
  }

  agent { label 'docker-host' }

  stages {
    stage('Clone Application') {

        /* Git checkout using declarative method 'scm' */
        steps {
            checkout scm
        }

        /* Git checkout */
        /*steps {
            checkout([$class: 'GitSCM',
            branches: [[name: '/master']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[$class: 'CleanCheckout']],
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: 'b2ed5912-90f0-40fb-8f98-a35933a55f30', url: 'https://github.com/nisum-inc/POC_Discovery_Server.git']]
            //userRemoteConfigs: [[credentialsId: '16e9c02e-8b5a-41de-b05e-5c0ac770dc97', url: 'https://github.com/nisum-inc/POC_Discovery_Server.git']]
            ])
        }*/
    }
    stage('Build Application') {
    	/* this is temporary step, ideally jar file should be downloaded from any artifact server. */
    	steps {
    		sh "cd ${WORKSPACE} && ${MAVEN_HOME}/bin/mvn -Dmaven.test.failure.ignore -Dmaven.test.skip=true clean package"
    	}
    }

    stage('Building Images') {
      steps{
        script {
                //def application = """${app}"""
                //application = application.replaceAll("_", "-")

                /* Copying jar file to relavant directory */
                sh script: "cp ${WORKSPACE}/target/" + app.appName + "*SNAPSHOT.jar ${WORKSPACE}/install/deploy/docker/" + app.appName.replaceAll("-", "_") + "/"

                /* Building docker image */
                docker.build(registry + "/" + app.appName.replaceAll("-", "_"), "-f ${WORKSPACE}/install/deploy/docker/" + app.appName.replaceAll("-", "_") + "/Dockerfile ${WORKSPACE}/install/deploy/docker")
        }
      }
    }

    stage('Tagging Images') {
        steps{
            script {

                commit= sh (returnStatus: true, script: "git log -1 --pretty=%h > gitOutput.txt")
                gitStatus = readFile('gitOutput.txt').trim()

                /* Assigning tag as Jenkins git pretty name and Build_Number for tracking pupose */
                sh script: "docker tag " + registry + "/" + app.appName.replaceAll("-", "_") + ":latest " + registry + "/" + app.appName.replaceAll("-", "_") + ":" + gitStatus + "_$BUILD_NUMBER"
            }
        }
    }
    stage('Push Images To Docker-Hub') {
       steps{
           script{

               commit= sh (returnStatus: true, script: "git log -1 --pretty=%h > gitOutput.txt")
               gitStatus = readFile('gitOutput.txt').trim()
               try {
                   /* Uploading image to docker hub using docker cli */
                   withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.registryCredential}",
                   usernameVariable: 'dockerUser', passwordVariable: 'dockerPassword']]) {
                      sh "docker login -u$dockerUser -p$dockerPassword; docker push ${env.registry}/" + app.appName.replaceAll("-", "_") + ":" + gitStatus + "_$BUILD_NUMBER;docker push ${env.registry}/" + app.appName.replaceAll("-", "_") + ":latest"
                   }
               } finally {
                    /* logging out docker account */
                    sh "docker logout"
               }
           }
       }
    }
  }
}